{"version":3,"sources":["types/types.ts","const/data.ts","components/Operator/style.ts","components/Operator/OperatorItem.tsx","components/Operator/OperatorList.tsx","styles/common.ts","pages/Operators.tsx","const/validation.ts","components/UI/button/style.ts","components/Operator/OperatorInput.tsx","components/Operator/OperatorForm.tsx","pages/PayIdPage.tsx","styles/global.ts","App.tsx","index.tsx"],"names":["TypeVariant","operators","id","name","imageUrl","Wrapper","styled","div","List","Logo","img","Item","InputWrapper","OperatorItem","operator","history","useHistory","onClick","push","src","alt","OperatorList","map","Title","h1","Container","FormWrapper","FormImage","BackLinkWrapper","PageContent","Operators","validate","Yup","phone","matches","required","sum","test","value","parseInt","replace","toString","CommonButton","button","OperatorInput","label","placeholder","mask","htmlFor","props","field","OperatorForm","initialValues","validationSchema","onSubmit","values","actions","mockFetch","Promise","resolve","reject","Math","random","setTimeout","toast","promise","pending","success","error","type","SUBMIT","PayIdPage","useParams","useState","setOperator","useEffect","filter","data","to","createGlobalStyle","App","path","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bc9bfe38.chunk.js","sourcesContent":["export interface IOperator {\r\n  id: number;\r\n  name: string;\r\n  imageUrl: string;\r\n}\r\n\r\nexport enum TypeVariant {\r\n  SUBMIT = \"submit\",\r\n  RESET = \"reset\",\r\n  BUTTON = \"button\",\r\n}","export const operators = [\r\n  {\r\n    id: 1,\r\n    name: \"МТС\",\r\n    imageUrl:\r\n      \"https://upload.wikimedia.org/wikipedia/commons/8/86/MTS_logo_2015.svg\",\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Билайн\",\r\n    imageUrl: \"https://upload.wikimedia.org/wikipedia/en/b/b1/Beeline.svg\",\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"Мегафон\",\r\n    imageUrl:\r\n      \"https://upload.wikimedia.org/wikipedia/commons/9/9e/MegaFon_logo.svg\",\r\n  },\r\n];","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const List = styled.div`\r\n  width: 100%;\r\n  max-width: 830px;\r\n  padding: 10px;\r\n  box-shadow: 0 15px 30px rgb(0 48 120 / 10%);\r\n  border-radius: 10px;\r\n  background: #fff;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  flex-wrap: wrap;\r\n  @media screen and (max-width:620px) {\r\n    flex-direction: column;\r\n    align-items:center;\r\n  }\r\n  \r\n`;\r\n\r\nexport const Logo = styled.img`\r\n  width: 100%;\r\n  height: 100%;\r\n  transition: transform .3s ease;\r\n`;\r\n\r\nexport const Item = styled.div`\r\n  display: flex;\r\n  background-color: #fff;\r\n  width: 250px;\r\n  height: 250px;\r\n  border: 1px solid rgba(0, 158, 255, 0.5);\r\n  display: block;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  padding: 20px;\r\n  overflow:hidden;\r\n\r\n  &:hover ${Logo} {\r\n    transform: scale(1.05);\r\n  }\r\n\r\n  @media screen and (max-width:815px) {\r\n    width: 200px;\r\n    height: 200px;\r\n  }\r\n\r\n  @media screen and (max-width:620px) {\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n`;\r\n\r\nexport const InputWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction:column;\r\n  \r\n  margin-bottom: 10px;\r\n`;","import React from \"react\";\r\nimport { IOperator } from \"../../types/types\";\r\nimport { Item, Logo } from \"./style\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\ninterface OperatorItemProps {\r\n  operator: IOperator;\r\n}\r\n\r\nconst OperatorItem = ({ operator }: OperatorItemProps) => {\r\n  const history = useHistory();\r\n  const handleClick = () => history.push(`/pay/${operator.id}`);\r\n\r\n  return (\r\n    <Item onClick={handleClick}>\r\n      <Logo src={operator.imageUrl} alt={operator.name} />\r\n    </Item>\r\n  );\r\n};\r\n\r\nexport default OperatorItem;\r\n","import React from \"react\";\r\nimport { IOperator } from \"../../types/types\";\r\nimport OperatorItem from \"./OperatorItem\";\r\nimport { List, Wrapper } from \"./style\";\r\n\r\ninterface OperatorListProps {\r\n  operators: IOperator[];\r\n}\r\n\r\nconst OperatorList = ({ operators }: OperatorListProps) => {\r\n  return (\r\n    <Wrapper>\r\n      <List>\r\n        {operators.map((operator) => (\r\n          <OperatorItem key={operator.id} operator={operator} />\r\n        ))}\r\n      </List>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default OperatorList;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Title = styled.h1`\r\n  text-align: center;\r\n  color: #009eff;\r\n  position: relative;\r\n  display: inline-block;\r\n  margin-bottom: 50px;\r\n  margin-top: 20px;\r\n  &::before {\r\n    content: \"\";\r\n    position: absolute;\r\n    bottom: -12px;\r\n    left: 0;\r\n    width: 17%;\r\n    height: 2px;\r\n    background-color: #009eff;\r\n  }\r\n`;\r\n\r\nexport const Container = styled.div`\r\n  max-width: 1170px;\r\n  margin: 0 auto;\r\n  @media screen and (max-width:620px) {\r\n    padding: 0 20px;\r\n  }\r\n`;\r\n\r\nexport const FormWrapper = styled.div`\r\n  position: relative;\r\n  background: #fff;\r\n  padding: 15px;\r\n  box-shadow: 0 15px 30px rgb(0 48 120 / 10%);\r\n  max-width: 500px;\r\n  border-radius: 5px;\r\n  @media screen and (max-width:810px) {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nexport const FormImage = styled.img`\r\n  position: absolute;\r\n  top:50%;\r\n  transform: translateY(-50%);\r\n  left:calc(100% + 60px);\r\n  max-width: 500px;\r\n\r\n  @media screen and (max-width:1080px) {\r\n    max-width: 250px;\r\n  }\r\n\r\n  @media screen and (max-width:1080px) {\r\n    max-width: 250px;\r\n  }\r\n\r\n  @media screen and (max-width:810px) {\r\n    display:none;\r\n  }\r\n`;\r\n\r\n\r\nexport const BackLinkWrapper = styled.div`\r\n  margin-bottom:10px;\r\n`;\r\n\r\nexport const PageContent = styled.div`\r\n  @media screen and (max-width:810px) {\r\n    display:flex;\r\n    justify-content: center;\r\n  }\r\n`;","import React from \"react\";\r\nimport { operators } from \"../const/data\";\r\nimport OperatorList from \"../components/Operator/OperatorList\";\r\nimport { Title, Container } from \"../styles/common\";\r\n\r\nconst Operators = () => {\r\n  return (\r\n    <Container>\r\n      <Title>Способ оплаты</Title>\r\n      <OperatorList operators={operators} />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Operators;\r\n","import * as Yup from 'yup'\r\n\r\n\r\nconst validateSum = (value = \"0\") => {\r\n  if (\r\n    parseInt(value.replace(/\\D+/g, \"\")) > 1000 ||\r\n    parseInt(value.replace(/\\D+/g, \"\")) < 1 ||\r\n    parseInt(value.replace(/\\D+/g, \"\")).toString() === \"NaN\"\r\n  ) {\r\n    return false;\r\n  } else {\r\n    return true;\r\n  }\r\n};\r\n\r\nexport const validate = Yup.object({\r\n  phone: Yup.string()\r\n    .matches(\r\n      /^(\\+7|7|8)?[\\s-]?\\(?[489][0-9]{2}\\)?[\\s-]?[0-9]{3}[\\s-]?[0-9]{2}[\\s-]?[0-9]{2}$/,\r\n      \"Введите корректный номер телефона\"\r\n    )\r\n    .required('Обязательное поле!'),\r\n  sum: Yup.string()\r\n    .test(\"sum\", 'Сумма должна быть от 1 ₽ до 1000 ₽' ,validateSum)\r\n    .required('Обязательное поле!'),\r\n})","import styled from \"styled-components\";\r\n\r\nexport const CommonButton = styled.button`\r\n  padding: 5px 15px;\r\n  color: teal;\r\n  font-size: 14px;\r\n  background: #ffff;\r\n  border: 1px solid rgba(0, 158, 255, 0.5);\r\n  cursor: pointer;\r\n  padding: 10px 50px ;\r\n  border-radius: 5px;\r\n  margin-top: 20px;\r\n;\r\n`;","import { ErrorMessage, Field, FieldProps } from \"formik\";\r\nimport React from \"react\";\r\nimport { InputWrapper } from \"./style\";\r\nimport InputMask from \"react-input-mask\";\r\n\r\ninterface OperatorInputProps {\r\n  label: string;\r\n  id: string;\r\n  name: string;\r\n  placeholder?: string;\r\n  mask?: string;\r\n}\r\n\r\nconst OperatorInput = ({\r\n  label,\r\n  id,\r\n  name,\r\n  placeholder,\r\n  mask = \"\",\r\n}: OperatorInputProps) => {\r\n  return (\r\n    <InputWrapper>\r\n      <label htmlFor={id}>{label}</label>\r\n      <Field name={name}>\r\n        {(props: FieldProps<string>) => {\r\n          return (\r\n            <InputMask\r\n              {...props.field}\r\n              id={id}\r\n              placeholder={placeholder}\r\n              mask={mask}\r\n            />\r\n          );\r\n        }}\r\n      </Field>\r\n      <ErrorMessage name={name} />\r\n    </InputWrapper>\r\n  );\r\n};\r\n\r\nexport default OperatorInput;\r\n","import { Form, Formik } from \"formik\";\r\nimport React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport { validate } from \"../../const/validation\";\r\nimport { FormImage, FormWrapper } from \"../../styles/common\";\r\nimport { IOperator, TypeVariant } from \"../../types/types\";\r\nimport { CommonButton } from \"../UI/button/style\";\r\nimport OperatorInput from \"./OperatorInput\";\r\n\r\ninterface FormValues {\r\n  phone: string;\r\n  sum: number;\r\n}\r\n\r\nconst OperatorForm = ({ id, name, imageUrl }: IOperator) => {\r\n  const initialValues: FormValues = { phone: \"\", sum: 1 };\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      validationSchema={validate}\r\n      onSubmit={(values, actions) => {\r\n        const mockFetch = new Promise((resolve, reject) => {\r\n          if (Math.random() > 0.5) {\r\n            setTimeout(resolve, 2000);\r\n          } else {\r\n            setTimeout(() => {\r\n              reject();\r\n            }, 2000);\r\n          }\r\n          setTimeout(() => {\r\n            history.push(\"/\");\r\n          }, 3000);\r\n        });\r\n        toast.promise(mockFetch, {\r\n          pending: \"Загрузка...\",\r\n          success: \"Оплата прошла успешно\",\r\n          error: \"Произошла ошибка\",\r\n        });\r\n      }}\r\n    >\r\n      <FormWrapper>\r\n        <Form>\r\n          <OperatorInput\r\n            label=\"Телефон\"\r\n            id=\"phone\"\r\n            name=\"phone\"\r\n            mask=\"+7(999)999-99-99\"\r\n          />\r\n          <OperatorInput label=\"Сумма\" id=\"sum\" name=\"sum\" mask=\"9999₽\" />\r\n          <CommonButton type={TypeVariant.SUBMIT}>Оплатить</CommonButton>\r\n        </Form>\r\n\r\n        <FormImage src={imageUrl} alt={name} />\r\n      </FormWrapper>\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default OperatorForm;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport {\r\n  BackLinkWrapper,\r\n  Container,\r\n  PageContent,\r\n  Title,\r\n} from \"../styles/common\";\r\nimport { operators } from \"../const/data\";\r\nimport { IOperator } from \"../types/types\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport OperatorForm from \"../components/Operator/OperatorForm\";\r\n\r\nconst PayIdPage = () => {\r\n  const { id } = useParams<{ id: string }>();\r\n  const [operator, setOperator] = useState<IOperator>({\r\n    id: 0,\r\n    name: \"\",\r\n    imageUrl: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    const operator = operators.filter((data) => data.id === +id)[0];\r\n\r\n    setTimeout(() => {\r\n      setOperator(operator);\r\n    }, 500);\r\n  }, [id]);\r\n\r\n  return (\r\n    <Container>\r\n      <Title>{operator.name}</Title>\r\n      <BackLinkWrapper>\r\n        <Link to=\"/\">Назад</Link>\r\n      </BackLinkWrapper>\r\n      <PageContent>\r\n        {operator.id !== 0 ? (\r\n          <OperatorForm\r\n            id={operator.id}\r\n            name={operator.name}\r\n            imageUrl={operator.imageUrl}\r\n          />\r\n        ) : (\r\n          <div>Загрузка...</div>\r\n        )}\r\n      </PageContent>\r\n      <ToastContainer />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PayIdPage;\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport default createGlobalStyle`\r\n* {\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n  font-family: 'Open Sans';\r\n}\r\n\r\n#root {\r\n  background: linear-gradient(to top,#fff 0%,#f6f8fa 100%);\r\n  min-height: 100vh;\r\n}\r\n\r\ninput {\r\n  padding: 10px 15px;\r\n  color: teal;\r\n  font-size: 14px;\r\n  background: transparent;\r\n  border: 1px solid rgba(0, 158, 255, 0.5);\r\n  background: #fff;\r\n  cursor: pointer;\r\n  outline:none;\r\n  border-radius:5px;\r\n}\r\n\r\na {\r\n  color:#009eff;\r\n}\r\n`;\r\n","import React from \"react\";\nimport { HashRouter, Route, Switch, Redirect } from \"react-router-dom\";\nimport Operators from \"./pages/Operators\";\nimport PayIdPage from \"./pages/PayIdPage\";\nimport Global from \"./styles/global\";\n\nconst App = () => {\n  return (\n    <>\n      <Global />\n      <HashRouter>\n        <div>\n          <Switch>\n            <Route path={\"/React-test-app/operators\"} exact>\n              <Operators />\n            </Route>\n            <Route path={\"/React-test-app/pay/:id\"} exact>\n              <PayIdPage />\n            </Route>\n            <Redirect to={\"/React-test-app\"} />\n          </Switch>\n        </div>\n      </HashRouter>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}